--exercitiul 11

-- actorii care joaca in filme aparute dupa 2018 ordonate descrescator dupa buget
select a.prenume_actor, a.nume_actor, f.titlu, e.buget
from actor a join contract c on(a.id_actor = c.id_actor)
             join echipa_productie e on (c.id_echipa = e.id_echipa)
             join film f on (e.id_echipa = f.id_echipa)           
where (select to_char( sysdate, 'yyyy')
              from dual)-4 < to_char(f.data_aparitie, 'yyyy')
order by e.buget desc;

-- toate filmele care au luat macar o nota de peste 7 de la un critic nascut dupa 1920
select titlu, durata, data_aparitie
from film 
where titlu in (select f.titlu
                from film f join recenzie r on (f.id_film = r.id_film)
                            join critic c1 on (r.id_critic = c1.id_critic)
                where r.nota_film > 7 and r.nota_film in(select  r.nota_film
                                                         from critic c2 join recenzie r on (r.id_critic = c2.id_critic)
                                                         where to_char(c2.data_nastere, 'yyyy')> 1920 ));
                                                         
--toate filmele in care joaca Brad Pitt
select titlu, data_aparitie
from film tabel1
where id_film in (select id_film
                  from film   
                  where tabel1.id_echipa in (select c.id_echipa
                                             from contract c join actor a on (c.id_actor = a.id_actor)
                                                             join echipa_productie e on(e.id_echipa = c.id_echipa)
                                             where lower(a.prenume_actor) = 'brad' and upper(a.nume_actor) = 'PITT'));

--toti actorii care au in cel mai lung contract 100 sau mai multe zile de filmari                
select   decode (a.nume_actor,'DiCaprio', 'Leonardo DiCaprio',
                     'Pitt', 'Brad Pitt',
                     'Portman', 'Natalie Portman',
                     'Nume Actor') "NumeActor" , max(c.perioada_contractuala)as perioada_maxima
from contract c join actor a on (c.id_actor = a.id_actor)
                join echipa_productie e on(c.id_echipa = e.id_echipa)
group by a.nume_actor
having  max(c.perioada_contractuala) >= 100;
 
 
--toti actorii pentru care procentul cerut de manager este maximul procentelor cerute de toti managerii)    
with procent_maxim(maxim) as (
select max(NVL(procent_cerut, 0))
from manager) 
select case
    when a.nume_actor = 'DiCaprio' then 'Leonardo DiCaprio'
    when a.nume_actor = 'Pitt' then 'Brad Pitt'
    when a.nume_actor = 'Portman' then 'Natalie Portman'
    when a.nume_actor = 'Keaton' then 'Diane Keaton'
    when a.nume_actor = 'Holland' then 'Tom Holland'
    else 'Nume Actor'
end as actor
from actor a join manager m on(m.id_manager = a.id_manager), procent_maxim
where m.procent_cerut = procent_maxim.maxim;


--exercitiul 12

alter table actor
add data_nastere date;
update actor
set data_nastere = '01-JUN-1996'
where nume_actor = 'Holland';
alter table actor
drop column data_nastere;


--exercitiul 13

create table ACTOR(
    id_actor int not null,
    id_manager int not null,
    nume_actor varchar(20),
    prenume_actor varchar(20),
    gen varchar(7),
    constraint gen_chk check (gen = 'barbat' or gen = 'femeie'),
    primary key (id_actor),
    foreign key (id_manager)
    references MANAGER(id_manager) on delete cascade
);


--exercitiul 14

create or replace view view_film as
    select id_film, id_echipa, titlu, profit, durata, data_aparitie, gen
    from film
    where profit >= 40000000
    with check option;

insert into view_film (id_film, id_echipa, titlu, profit,durata, data_aparitie, gen)
values(306, 10005, 'Joker', 45000000, 2.5, '19-OCT-2019', 'Drama');
rollback;


--exercitiul 15

create index imdb on film (titlu, data_aparitie);

--exercitiul 16

select nume_actor, titlu, buget, data_aparitie, profit 
from actor left outer join contract using(id_actor)
           left outer join echipa_productie using(id_echipa) 
           left outer join film using(id_echipa);

--totate locatiile in care s-a filmat un film cu profit de 60000000 varianta1
select distinct(id_locatie)
from locatie_filmari lf
where not exists
    (select id_film
    from film f
    where profit = 60000000
    and not exists
        (select id_film
        from locatie_filmari lf2
        where f.id_film = lf2.id_film
        and lf2.id_locatie = lf.id_locatie));




--totate locatiile in care s-a filmat un film cu profit de 60000000 varianta2
select id_locatie
from locatie_filmari
where id_film in
    (select id_film
    from film
    where profit = 60000000)
group by id_locatie
having count(id_film)=
       (select count(*)
        from film
        where profit = 60000000);

